@mixin font_size_mixin() {
    &.compact {
        font-size: $font_size;
    }

    &.cozy {
        font-size: $font_size;
    }

    &.comfortable {
        font-size: $font_size;
    }
}

@mixin font-size-x-small {
    // 9px
    font-size: $size-x-small;
    font-family: $font-family;
}

@mixin font-size-small {
    // 12px
    font-size: $size-small;
    font-family: $font-family;
}

@mixin font-size-regular {
    // 16px
    font-size: $size-regular;
    font-family: $font-family;
}

@mixin font-size-large {
    // 24px
    font-size: $size-large;
    font-family: $font-family;
}

@mixin font-size-x-large {
    // 32px
    font-size: $size-x-large;
    font-family: $font-family;
}

@mixin font-size-xx-large {
    // 48px
    font-size: $size-xx-large;
    font-family: $font-family;
}

@mixin font-size-xxx-large {
    // 64px
    font-size: $size-xxx-large;
    font-family: $font-family;
}

@mixin font-size-xxxx-large {
    // 96px
    font-size: $size-xxxx-large;
    font-family: $font-family;
}

@mixin margin-mixin() {
    .compact & {
        margin-top: $box_size / 2;
        margin-right: $box_size / 2;
        margin-bottom: $box_size / 2;
        margin-left: $box_size / 2;
    }

    .cozy & {
        margin-top: $box_size;
        margin-right: $box_size;
        margin-bottom: $box_size;
        margin-left: $box_size;
    }

    .comfortable & {
        margin-top: $box_size * 1.5;
        margin-right: $box_size * 1.5;
        margin-bottom: $box_size * 1.5;
        margin-left: $box_size * 1.5;
    }
}

@mixin margin-create-mixin( $location, $size ) {
    @if $location == all {
        .compact & {
            margin-top: 0;
            margin-right: 0;
            margin-bottom: 0;
            margin-left: 0;
        }

        .cozy & {
            margin-top: 0;
            margin-right: 0;
            margin-bottom: 0;
            margin-left: 0;
        }

        .comfortable & {
            margin-top: 0;
            margin-right: 0;
            margin-bottom: 0;
            margin-left: 0;
        }
    }
    
    @if $location != all {
        
        @if length($size) != 0 {
            .compact & {
                margin-#{$location}: $size;
            }

            .cozy & {
                margin-#{$location}: $size;
            }

            .comfortable & {
                margin-#{$location}: $size;
            }
        } @else {
            .compact & {
                margin-#{$location}: $box_size / 2;
            }

            .cozy & {
                margin-#{$location}: $box_size;
            }

            .comfortable & {
                margin-#{$location}: $box_size * 1.5;
            }
        }
    } @else {
        @if length($size) != 0 {
            .compact & {
                margin: $size;
            }

            .cozy & {
                margin: $size;
            }

            .comfortable & {
                margin: $size;
            }
        } @else {
            .compact & {
                margin: $box_size / 2;
            }

            .cozy & {
                margin: $box_size;
            }

            .comfortable & {
                margin: $box_size * 1.5;
            }
        }
    }
}

@mixin margin-output-mixin( $location ) {

    @if $location == all {
        .margin-none {
            @include margin-create-mixin( $location, 0 );
        }

        .margin-xx-small {
            @include margin-create-mixin( $location, $size-xx-small );
        }

        .margin-x-small {
            @include margin-create-mixin( $location, $size-x-small );
        }

        .margin-small {
            @include margin-create-mixin( $location, $size-small );
        }

        .margin-regular {
            @include margin-create-mixin( $location, $size-regular );
        }

        .margin-large {
            @include margin-create-mixin( $location, $size-large );
        }

        .margin-x-large {
            @include margin-create-mixin( $location, $size-x-large );
        }

        .margin-xx-large {
            @include margin-create-mixin( $location, $size-xx-large );
        }

        .margin-xxx-large {
            @include margin-create-mixin( $location, $size-xxx-large );
        }

        .margin-xxxx-large {
            @include margin-create-mixin( $location, $size-xxxx-large );
        }
    } @else {
        .margin-#{$location}-none {
            @include margin-create-mixin( $location, 0 );
        }

        .margin-#{$location}-xx-small {
            @include margin-create-mixin( $location, $size-xx-small );
        }

        .margin-#{$location}-x-small {
            @include margin-create-mixin( $location, $size-x-small );
        }

        .margin-#{$location}-small {
            @include margin-create-mixin( $location, $size-small );
        }

        .margin-#{$location}-regular {
            @include margin-create-mixin( $location, $size-regular );
        }

        .margin-#{$location}-large {
            @include margin-create-mixin( $location, $size-large );
        }

        .margin-#{$location}-x-large {
            @include margin-create-mixin( $location, $size-x-large );
        }

        .margin-#{$location}-xx-large {
            @include margin-create-mixin( $location, $size-xx-large );
        }

        .margin-#{$location}-xxx-large {
            @include margin-create-mixin( $location, $size-xxx-large );
        }

        .margin-#{$location}-xxxx-large {
            @include margin-create-mixin( $location, $size-xxxx-large );
        }
    }
}

@mixin padding-mixin( $container:all ) {

    .compact & {

        @if $container == all {
            padding-bottom: $box_size / 2;
        }

        padding-left: $box_size / 2;
        padding-right: $box_size / 2;
        padding-top: $box_size / 2;
    }

    .cozy & {

        @if $container == all {
            padding-bottom: $box_size;
        }

        padding-left: $box_size;
        padding-right: $box_size;
        padding-top: $box_size;
    }

    .comfortable & {

        @if $container == all {
            padding-bottom: $box_size * 1.5;
        }

        padding-left: $box_size * 1.5;
        padding-right: $box_size * 1.5;
        padding-top: $box_size * 1.5;
        
    }
}

@mixin padding-create-mixin( $location, $size ) {
    @if $location == all {
        .compact & {
            padding-top: $size;
            padding-right: $size;
            padding-bottom: $size;
            padding-left: $size;
        }

        .cozy & {
            padding-top: $size;
            padding-right: $size;
            padding-bottom: $size;
            padding-left: $size;
        }

        .comfortable & {
            padding-top: $size;
            padding-right: $size;
            padding-bottom: $size;
            padding-left: $size;
        }
    }

    @if length($size) != 0 and $location != all {
        .compact & {
            padding-#{$location}: $size;
        }

        .cozy & {
            padding-#{$location}: $size;
        }

        .comfortable & {
            padding-#{$location}: $size;
        }
    } @else {

        @if $location != all {
            .compact & {
                padding-#{$location}: $box_size / 2;
            }

            .cozy & {
                padding-#{$location}: $box_size;
            }

            .comfortable & {
                padding-#{$location}: $box_size * 1.5;
            }
        }
    }
}

@mixin padding-output-mixin( $location ) {

    @if $location == all {
        .padding-none {
            @include padding-create-mixin( $location, 0 );
        }

        .padding-xx-small {
            @include padding-create-mixin( $location, $size-xx-small );
        }

        .padding-x-small {
            @include padding-create-mixin( $location, $size-x-small );
        }

        .padding-small {
            @include padding-create-mixin( $location, $size-small );
        }

        .padding-regular {
            @include padding-create-mixin( $location, $size-regular );
        }

        .padding-large {
            @include padding-create-mixin( $location, $size-large );
        }

        .padding-x-large {
            @include padding-create-mixin( $location, $size-x-large );
        }

        .padding-xx-large {
            @include padding-create-mixin( $location, $size-xx-large );
        }

        .padding-xxx-large {
            @include padding-create-mixin( $location, $size-xxx-large );
        }

        .padding-xxxx-large {
            @include padding-create-mixin( $location, $size-xxxx-large );
        }
    } @else {
        .padding-#{$location}-none {
            @include padding-create-mixin( $location, 0 );
        }

        .padding-#{$location}-x-small {
            @include padding-create-mixin( $location, $size-x-small );
        }

        .padding-#{$location}-small {
            @include padding-create-mixin( $location, $size-small );
        }

        .padding-#{$location}-regular {
            @include padding-create-mixin( $location, $size-regular );
        }

        .padding-#{$location}-large {
            @include padding-create-mixin( $location, $size-large );
        }

        .padding-#{$location}-x-large {
            @include padding-create-mixin( $location, $size-x-large );
        }

        .padding-#{$location}-xx-large {
            @include padding-create-mixin( $location, $size-xx-large );
        }

        .padding-#{$location}-xxx-large {
            @include padding-create-mixin( $location, $size-xxx-large );
        }

        .padding-#{$location}-xxxx-large {
            @include padding-create-mixin( $location, $size-xxxx-large );
        }
    }
}

@mixin color-mixin( $name, $color ) {
    .#{$name} {
        color: $color;
    }

    .#{$name}-bg {
        background-color: $color;

        &.shadow {
            @include shadow-mixin( $color, 1px );
        }
    }

    .#{$name}-border {
        border: solid 1px $color;
    }

    .#{$name}-border-top {
        border-top: solid 1px $color;
    }
    

    .#{$name}-border-bottom {
        border-bottom: solid 1px $color;
    }

    .#{$name}-border-left {
        border-left: solid 1px $color;
    }

    .#{$name}-border-right {
        border-right: solid 1px $color;
    }

    .#{$name}-before:before {
        color: $color;
    }

    .#{$name}-before-bg:before {
        background: $color;
    }

    .#{$name}-gradient-bg {
        background: $color;
        background: -o-linear-gradient(top, $color 0%, darken($color, 5) 100%);
        background: -ms-linear-gradient(top, $color 0%, darken($color, 5) 100%);
        background: -moz-linear-gradient(top, $color 0%, darken($color, 5) 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $color), color-stop(100%, darken($color, 10)) );
        background: -webkit-linear-gradient(top, $color 0%, darken($color, 5) 100%);
        background: linear-gradient(to bottom, $color 0%, darken($color, 5) 100%);
    }

    .#{$name}-btn {
        @include font-size-regular();
        @include padding-create-mixin( bottom, .55em );
        @include padding-create-mixin( left, 1em );
        @include padding-create-mixin( right, 1em );
        @include padding-create-mixin( top, .55em );
        background-color: $color;
        border: solid 1px rgba( darken($color, 5), .6);
        -webkit-border-radius: 2px;
        -moz-border-radius: 2px;
        -ms-border-radius: 2px;
        -o-border-radius: 2px;
        border-radius: 2px;
        display: inline-block;
        font-weight: $font-weight-semi;
        min-width: 6.5em;
        text-align: center;

        @if ( lightness( $color ) > 80 ) {
            color: $dark;
        } @else {
            color: $white;
        }

        &:hover,
        &.hover
        {
            background-color: darken($color, 10);
            border: solid 1px rgba( darken($color, 7), .6);
        }

        &.active,
        {
            background-color: darken($color, 15);
            border: solid 1px rgba( darken($color, 10), .6);
            outline: none;
        }

        &[disabled="true"],
        &.disabled
        {
            background-color: $color;
            border: solid 1px rgba( darken($color, 7), .4);
            cursor: default;
            opacity: .4;
        }
    }

    // Corrected the alignment of anchor tags as buttons
    a.#{$name}-btn,
    a.#{$name}-secondary-btn {
        position: relative;
        top: 1px;
    }

    .#{$name}-secondary-btn {
        @include font-size-small();
        @include padding-create-mixin( bottom, .75em );
        @include padding-create-mixin( left, 1em );
        @include padding-create-mixin( right, 1em );
        @include padding-create-mixin( top, .75em );
        background-color: transparent;
        border: solid 1px rgba( darken($color, 5), .6);
        -webkit-border-radius: 2px;
        -moz-border-radius: 2px;
        -ms-border-radius: 2px;
        -o-border-radius: 2px;
        border-radius: 2px;
        color: darken($color, 10);
        display: inline-block;
        font-weight: $font-weight-semi;
        min-width: 6.5em;

        &:hover,
        &.hover
        {
            background-color: rgba($color, .1);
            border: solid 1px rgba( darken($color, 7), .3);
        }

        &.active,
        {
            background-color: rgba($color, .8);
            border: solid 1px rgba( darken($color, 10), .6);
            outline: none;
        }

        &[disabled="true"],
        &.disabled
        {
            border: solid 1px rgba( darken($color, 7), .4);
            cursor: default;
            opacity: .4;
        }
    }

    .#{$name}-gradient-btn {
        @include font-size-small();
        @include padding-create-mixin( bottom, .75em );
        @include padding-create-mixin( left, 1em );
        @include padding-create-mixin( right, 1em );
        @include padding-create-mixin( top, .75em );
        background: $color;
        background: -o-linear-gradient(top, $color 0%, darken($color, 5) 100%);
        background: -ms-linear-gradient(top, $color 0%, darken($color, 5) 100%);
        background: -moz-linear-gradient(top, $color 0%, darken($color, 5) 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $color), color-stop(100%, darken($color, 10)) );
        background: -webkit-linear-gradient(top, $color 0%, darken($color, 5) 100%);
        background: linear-gradient(to bottom, $color 0%, darken($color, 5) 100%);
        border: solid 1px rgba( darken($color, 5), .6);
        -webkit-border-radius: 2px;
        -moz-border-radius: 2px;
        -ms-border-radius: 2px;
        -o-border-radius: 2px;
        border-radius: 2px;
        display: inline-block;
        font-weight: $font-weight-semi;
        min-width: 6.5em;

        @if ( lightness( $color ) > 70 ) {
            color: $dark;
        } @else {
            color: $white;
        }

        &:hover {
            background-color: darken($color, 2);
            border: solid 1px rgba( darken($color, 7), .6);
        }
    }
}

@mixin shadow-mixin( $color, $size) {
    border-bottom: solid $size rgba( darken($color, 10), .6);
    -webkit-border-radius: .3em;
    -moz-border-radius: .3em;
    -ms-border-radius: .3em;
    -o-border-radius: .3em;
    border-radius: .3em;
}

@mixin border-mixin( $location, $type, $size, $color ) {

    @if $location != all {
        border-#{$location}: $type $size $color;
    } @else {
        border: $type $size $color;
    }
}

@mixin clearfix-mixin() {
    *zoom: 1;

    &:before,
    &:after 
    {
        content: "";
        display: table;
        line-height: 0;
    }

    &:after {
        clear: both;
    }
}

@mixin user-select-mixin() {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

@mixin transition( $time, $property, $function ) {
    -moz-transition-duration: $time;
    -moz-transition-property: $property;
    -moz-transition-timing-function: $function;
    -ms-transition-duration: $time;
    -ms-transition-property: $property;
    -ms-transition-timing-function: $function;
    -webkit-transition-duration: $time;
    -webkit-transition-property: $property;
    -webkit-transition-timing-function: $function;
    transition-duration: $time;
    transition-property: $property;
    transition-timing-function: $function;
}

@mixin vertical-pipe-mixin( $width, $height ) {
    height: $height;
    width: $width;
}

@mixin box-shadow-mixin() {
    $color: rgba(0, 0, 0, .2);
    $offset: 2px;

    .box-shadow-top {
        box-shadow: 0 -#{$offset} 1px $color;
    }

    .box-shadow-right {
        box-shadow: #{$offset} 0 1px $color;
    }

    .box-shadow-bottom {
        box-shadow: 0 #{$offset} 1px $color;
    }

    .box-shadow-left {
        box-shadow: -#{$offset} 0 1px $color;
    }
}

@mixin border-radius-mixin() {
    .border-radius-none {
        border-radius: 0;
    }

    .border-radius-small {
        border-radius: 1px;
    }

    .border-radius-regular {
        border-radius: 2px;
    }

    .border-radius-large {
        border-radius: 3px;
    }

    .border-radius-x-large {
        border-radius: 4px;
    }
}
